import React, { useEffect, useState } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { 
  CheckCircleIcon, 
  XCircleIcon, 
  ClockIcon, 
  TicketIcon, 
  CalendarIcon,
  BuildingOfficeIcon,
  UserIcon,
  CreditCardIcon,
  QrCodeIcon,
  FilmIcon
} from '@heroicons/react/24/outline';
import QRCode from 'qrcode';
import LoadingSpinner from '../components/LoadingSpinner';
import { paymentAPI, bookingAPI } from '../services/api';
import { useAuth } from '../contexts/AuthContext';

interface VNPayResponse {
  vnp_Amount: string;
  vnp_BankCode: string;
  vnp_BankTranNo: string;
  vnp_CardType: string;
  vnp_OrderInfo: string;
  vnp_PayDate: string;
  vnp_ResponseCode: string;
  vnp_TmnCode: string;
  vnp_TransactionNo: string;
  vnp_TransactionStatus: string;
  vnp_TxnRef: string;
  vnp_SecureHash: string;
}

interface Ticket {
  id: number;
  orderId: number;
  seatId: number;
  price: number;
  token: string;
  status: string; // PAID, PENDING, etc.
  seat?: {
    seatNumber: string;
    rowNumber: string;
    columnNumber: number;
    roomId: number;
    seatType: 'REGULAR' | 'VIP' | 'COUPLE';
    price: number;
  };
  showtime?: {
    startTime: string;
    endTime: string;
    movie?: {
      title: string;
      posterUrl?: string;
    };
    room?: {
      name: string;
      cinema?: {
        name: string;
        address: string;
      };
    };
  };
}

interface BookingDetails {
  id: number;
  movie: {
    title: string;
    posterUrl?: string;
  };
  showtime: {
    startTime: string;
    endTime: string;
    room: {
      name: string;
      cinema: {
        name: string;
        address: string;
      };
    };
  };
  order: {
    tickets: Array<Ticket>;
    status: string; // PAID, PENDING, etc.
  };
  customerName: string;
  customerEmail: string;
  totalPrice: number;
}

const PaymentCallback: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const { user } = useAuth();
  const [loading, setLoading] = useState(true);
  const [paymentData, setPaymentData] = useState<VNPayResponse | null>(null);
  const [bookingDetails, setBookingDetails] = useState<BookingDetails | null>(null);
  const [qrCodeUrl, setQrCodeUrl] = useState<string>('');
  const [status, setStatus] = useState<'success' | 'failed' | 'pending'>('pending');
  const [errorMessage, setErrorMessage] = useState<string>('');

  // Function to create HTML email and send to user
  const sendQREmailToUser = async (bookingId: number, qrCodeDataUrl: string, currentBookingDetails?: BookingDetails) => {
    try {
      console.log('üéØ [FRONTEND] Sending QR email for booking:', bookingId);
      
      // Use current booking details or fallback to state
      const details = currentBookingDetails || bookingDetails;
      if (!details) {
        console.error('‚ùå [FRONTEND] No booking details available for email');
        return false;
      }

      // Create HTML email content
      const htmlContent = createEmailHTML(details, qrCodeDataUrl);
      const subject = `X√°c nh·∫≠n ƒë·∫∑t v√© - ${details.movie.title}`;
      
      console.log('üìß [FRONTEND] Sending email to:', details.customerEmail);
      const response = await fetch(`/api/booking/${bookingId}/send-email`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        },
        body: JSON.stringify({ 
          htmlContent,
          subject,
          toEmail: details.customerEmail
        })
      });
      
      if (response.ok) {
        console.log('‚úÖ [FRONTEND] Email sent successfully');
        return true;
      } else {
        console.error('‚ùå [FRONTEND] Failed to send email:', response.statusText);
        return false;
      }
    } catch (error) {
      console.error('‚ùå [FRONTEND] Error sending email:', error);
      return false;
    }
  };

  // Helper function to generate QR code and send email
  const generateQRAndSendEmail = async (bookingDetails: BookingDetails) => {
    try {
      console.log('üéØ [FRONTEND] Starting QR generation and email sending for booking:', bookingDetails.id);
      
      // Generate QR code
      let qrData = `BOOKING_${bookingDetails.id}`; // Default fallback
      if (bookingDetails.order?.tickets && bookingDetails.order.tickets.length > 0) {
        const firstTicket = bookingDetails.order.tickets[0];
        if (firstTicket.token) {
          qrData = `TICKET_${firstTicket.token}`;
        }
      }
      
      console.log('üì± [FRONTEND] Generating QR code with data:', qrData);
      const qrCodeDataUrl = await QRCode.toDataURL(qrData);
      setQrCodeUrl(qrCodeDataUrl);
      
      // Send email with QR code
      const emailSent = await sendQREmailToUser(bookingDetails.id, qrCodeDataUrl, bookingDetails);
      if (emailSent) {
        console.log('‚úÖ [FRONTEND] QR code generated and email sent successfully');
      } else {
        console.warn('‚ö†Ô∏è [FRONTEND] QR code generated but email failed');
      }
      
      return { qrCodeDataUrl, emailSent };
    } catch (error) {
      console.error('‚ùå [FRONTEND] Error in QR generation and email sending:', error);
      return { qrCodeDataUrl: null, emailSent: false };
    }
  };

  // Function to create HTML email content
  const createEmailHTML = (booking: BookingDetails, qrCodeDataUrl: string): string => {
    return `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>X√°c nh·∫≠n ƒë·∫∑t v√©</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f5f5f5; }
        .container { background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { background: linear-gradient(135deg, #1f2937, #374151); color: white; padding: 25px; text-align: center; border-radius: 10px 10px 0 0; margin: -30px -30px 30px -30px; }
        .qr-section { text-align: center; margin: 30px 0; padding: 25px; background-color: #f8fafc; border-radius: 10px; border: 2px dashed #e5e7eb; }
        .qr-section img { width: 150px; height: 150px; border: 2px solid #e5e7eb; border-radius: 8px; margin-bottom: 10px; }
        .booking-info { background-color: #ecfdf5; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #10b981; }
        .footer { text-align: center; color: #6b7280; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; }
        .highlight { color: #1f2937; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üé¨ X√°c nh·∫≠n ƒë·∫∑t v√© th√†nh c√¥ng!</h1>
        </div>
        
        <p>Xin ch√†o <span class="highlight">${booking.customerName}</span>,</p>
        
        <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t v√© t·∫°i r·∫°p chi·∫øu phim c·ªßa ch√∫ng t√¥i! V√© c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n th√†nh c√¥ng.</p>
        
        <div class="booking-info">
            <p><strong>üé≠ Phim:</strong> ${booking.movie.title}</p>
            <p><strong>üè¢ R·∫°p:</strong> ${booking.showtime.room.cinema.name}</p>
            <p><strong>üö™ Ph√≤ng:</strong> ${booking.showtime.room.name}</p>
            <p><strong>üìÖ Ng√†y & Gi·ªù:</strong> ${new Date(booking.showtime.startTime).toLocaleString('vi-VN')}</p>
            <p><strong>üí∞ T·ªïng ti·ªÅn:</strong> ${booking.totalPrice.toLocaleString('vi-VN')} VNƒê</p>
            <p><strong>ü™ë Gh·∫ø:</strong> ${booking.order.tickets.map(t => t.seat?.seatNumber || 'N/A').join(', ')}</p>
        </div>
        
        <div class="qr-section">
            <h3>üéüÔ∏è M√£ QR V√© c·ªßa b·∫°n</h3>
            <img src="${qrCodeDataUrl}" alt="QR Code v√©" />
            <p><strong>Xu·∫•t tr√¨nh m√£ QR n√†y t·∫°i qu·∫ßy v√© ƒë·ªÉ nh·∫≠n v√©</strong></p>
        </div>
        
        <div style="background-color: #fef3c7; padding: 15px; border-radius: 6px; margin: 20px 0;">
            <h4 style="color: #92400e; margin-bottom: 10px;">üì± L∆∞u √Ω quan tr·ªçng</h4>
            <ul style="color: #78350f; margin: 0; padding-left: 20px;">
                <li>C√≥ m·∫∑t tr∆∞·ªõc gi·ªù chi·∫øu <strong>15 ph√∫t</strong></li>
                <li>Xu·∫•t tr√¨nh m√£ QR t·∫°i qu·∫ßy v√©</li>
                <li>Mang theo gi·∫•y t·ªù t√πy th√¢n</li>
                <li>Li√™n h·ªá hotline n·∫øu c·∫ßn h·ªó tr·ª£: <strong>1900-xxxx</strong></li>
            </ul>
        </div>
        
        <div class="footer">
            <p>C·∫£m ∆°n b·∫°n ƒë√£ l·ª±a ch·ªçn d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!</p>
            <p><strong>üé≠ Cinema Team</strong></p>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi tr·ª±c ti·∫øp.</p>
        </div>
    </div>
</body>
</html>
    `;
  };

  useEffect(() => {
    const processPayment = async () => {
      try {
        // Ki·ªÉm tra xem c√≥ tham s·ªë URL kh√¥ng
        if (!searchParams || searchParams.size === 0) {
          console.log('No search parameters found in URL, checking for booking from Profile');
          
          // Ki·ªÉm tra xem c√≥ booking t·ª´ Profile kh√¥ng
          const selectedBooking = localStorage.getItem('selectedBooking');
          if (selectedBooking) {
            console.log('Found booking from Profile:', selectedBooking);
            try {
              const booking = JSON.parse(selectedBooking);
              
              // Ki·ªÉm tra authentication tr∆∞·ªõc khi g·ªçi API
              if (!user) {
                console.error('User not authenticated');
                setErrorMessage('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin v√©. Vui l√≤ng ƒëƒÉng nh·∫≠p v√† th·ª≠ l·∫°i.');
                setStatus('failed');
                setLoading(false);
                return;
              }

              // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt booking v·ªõi gh·∫ø
              try {
                const bookingDetailsResponse = await bookingAPI.getById(booking.id);
                console.log('Booking details from API:', bookingDetailsResponse);
                
                // X·ª≠ l√Ω response v·ªõi c√°c state kh√°c nhau
                let bookingData;
                if (bookingDetailsResponse.state === 'SUCCESS' || bookingDetailsResponse.state === '200' || bookingDetailsResponse.state === '302') {
                  bookingData = bookingDetailsResponse.object;
                  console.log('Raw booking data:', bookingData);
                } else {
                  throw new Error(`API returned state: ${bookingDetailsResponse.state}`);
                }
                
                // C·ªë g·∫Øng l·∫•y th√¥ng tin v√© v·ªõi nhi·ªÅu c√°ch kh√°c nhau
                let tickets = [];
                const anyBookingData = bookingData as any; // Cast to any to access dynamic properties
                
                // C√°ch 1: T·ª´ bookingData.tickets tr·ª±c ti·∫øp
                if (anyBookingData.tickets && Array.isArray(anyBookingData.tickets)) {
                  console.log('Found tickets directly in booking data:', anyBookingData.tickets);
                  tickets = anyBookingData.tickets;
                }
                // C√°ch 2: T·ª´ bookingData.order.tickets
                else if (anyBookingData.order?.tickets && Array.isArray(anyBookingData.order.tickets)) {
                  console.log('Found tickets in booking order:', anyBookingData.order.tickets);
                  tickets = anyBookingData.order.tickets;
                }
                // C√°ch 3: T·ª´ bookingData.bookingTickets (c√≥ th·ªÉ c√≥ t√™n kh√°c)
                else if (anyBookingData.bookingTickets && Array.isArray(anyBookingData.bookingTickets)) {
                  console.log('Found bookingTickets:', anyBookingData.bookingTickets);
                  tickets = anyBookingData.bookingTickets;
                }
                
                console.log('Processed tickets array:', tickets);
                
                // T·∫°o booking details t·ª´ d·ªØ li·ªáu th·ª±c t·∫ø
                const anyBooking = booking as any; // Cast booking to any for accessing extended properties
                
                const realBookingDetails: BookingDetails = {
                  id: bookingData.id || booking.id,
                  movie: {
                    title: anyBookingData.movie?.title || 
                           anyBookingData.showtime?.movie?.title || 
                           (tickets[0] as any)?.showtime?.movie?.title || 
                           anyBooking.movie?.title || 
                           'Phim ƒë√£ ƒë·∫∑t',
                    posterUrl: anyBookingData.movie?.posterUrl || 
                              anyBookingData.showtime?.movie?.posterUrl || 
                              (tickets[0] as any)?.showtime?.movie?.posterUrl ||
                              anyBooking.movie?.posterUrl
                  },
                  showtime: {
                    startTime: anyBookingData.showtime?.startTime || 
                              (tickets[0] as any)?.showtime?.startTime || 
                              anyBooking.showtime?.startTime || 
                              new Date().toISOString(),
                    endTime: anyBookingData.showtime?.endTime || 
                            (tickets[0] as any)?.showtime?.endTime || 
                            anyBooking.showtime?.endTime || 
                            new Date().toISOString(),
                    room: {
                      name: anyBookingData.showtime?.room?.name || 
                           (tickets[0] as any)?.showtime?.room?.name || 
                           anyBooking.showtime?.room?.name || 
                           'Ph√≤ng chi·∫øu',
                      cinema: {
                        name: anyBookingData.showtime?.room?.cinema?.name || 
                             (tickets[0] as any)?.showtime?.room?.cinema?.name || 
                             anyBooking.showtime?.room?.cinema?.name || 
                             'R·∫°p chi·∫øu phim',
                        address: anyBookingData.showtime?.room?.cinema?.address || 
                                (tickets[0] as any)?.showtime?.room?.cinema?.address || 
                                anyBooking.showtime?.room?.cinema?.address || 
                                'ƒê·ªãa ch·ªâ r·∫°p chi·∫øu'
                      }
                    }
                  },
                  order: {
                    tickets: tickets.length > 0 ? tickets.map((ticket: any, index: number) => {
                      console.log(`Processing ticket ${index}:`, ticket);
                      
                      // L·∫•y th√¥ng tin gh·∫ø t·ª´ c√°c ngu·ªìn kh√°c nhau
                      const seatInfo = ticket.seat || ticket.bookingSeat || ticket;
                      console.log(`Seat info for ticket ${index}:`, seatInfo);
                      
                      // T·∫°o seatNumber t·ª´ rowNumber v√† columnNumber
                      const rowNumber = seatInfo.rowNumber || seatInfo.row || String.fromCharCode(65 + index); // A, B, C...
                      const columnNumber = seatInfo.columnNumber || seatInfo.column || (index + 1);
                      const seatNumber = seatInfo.seatNumber || `${rowNumber}${columnNumber}`;
                      
                      console.log(`Generated seat info: ${seatNumber} (${rowNumber}${columnNumber})`);
                      
                      return {
                        id: ticket.id || ticket.ticketId || index + 1,
                        orderId: ticket.orderId || ticket.bookingId || bookingData.id,
                        seatId: ticket.seatId || seatInfo.id || index + 1,
                        seat: {
                          seatNumber: seatNumber,
                          rowNumber: rowNumber,
                          columnNumber: columnNumber,
                          roomId: seatInfo.roomId || 1,
                          seatType: (seatInfo.seatType || 'REGULAR') as 'REGULAR' | 'VIP' | 'COUPLE',
                          price: seatInfo.price || ticket.price || 80000
                        },
                        price: ticket.price || seatInfo.price || 80000,
                        token: ticket.token || `token_${ticket.id || index + 1}`,
                        status: ticket.status || 'PAID'
                      };
                    }) : [
                      // Fallback n·∫øu kh√¥ng c√≥ th√¥ng tin v√© chi ti·∫øt
                      {
                        id: 1,
                        orderId: bookingData.id,
                        seatId: 1,
                        seat: {
                          seatNumber: 'A1',
                          rowNumber: 'A',
                          columnNumber: 1,
                          roomId: 1,
                          seatType: 'REGULAR' as const,
                          price: bookingData.totalPrice || booking.totalPrice || 80000
                        },
                        price: bookingData.totalPrice || booking.totalPrice || 80000,
                        token: `token_${bookingData.id}`,
                        status: 'PAID'
                      }
                    ],
                    status: bookingData.status || 'PAID'
                  },
                  customerName: bookingData.customerName || booking.customerName,
                  customerEmail: bookingData.customerEmail || booking.customerEmail,
                  totalPrice: bookingData.totalPrice || booking.totalPrice
                };
                
                console.log('Final booking details:', realBookingDetails);
                setBookingDetails(realBookingDetails);
                
                setStatus('success');
                
                // T·∫°o QR code v√† g·ª≠i email
                await generateQRAndSendEmail(realBookingDetails);
              } catch (apiError) {
                console.error('API call failed:', apiError);
                
                // N·∫øu API th·∫•t b·∫°i, hi·ªÉn th·ªã th√¥ng b√°o l·ªói thay v√¨ mock data
                setErrorMessage('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt v√© t·ª´ server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.');
                setStatus('failed');
                setLoading(false);
                return;
              }
              
              // X√≥a d·ªØ li·ªáu t·ª´ localStorage
              localStorage.removeItem('selectedBooking');
              localStorage.removeItem('lastTxnRef');
              setLoading(false);
              return;
            } catch (error) {
              console.error('Error processing booking from Profile:', error);
              setErrorMessage('Kh√¥ng th·ªÉ x·ª≠ l√Ω th√¥ng tin v√© t·ª´ Profile');
              setStatus('failed');
              setLoading(false);
              return;
            }
          }
          
          setErrorMessage('Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n. Vui l√≤ng truy c·∫≠p t·ª´ trang ƒë·∫∑t v√©.');
          setStatus('failed');
          setLoading(false);
          return;
        }

        console.log('Search params:', Object.fromEntries(searchParams.entries()));

        // L·∫•y txnRef t·ª´ URL tr∆∞·ªõc ti√™n
        const txnRef = searchParams.get('vnp_TxnRef');

        // N·∫øu kh√¥ng c√≥ txnRef trong URL, th·ª≠ l·∫•y t·ª´ localStorage
        if (!txnRef) {
          console.log('No txnRef in URL, trying to get from localStorage');
          const storedTxnRef = localStorage.getItem('lastTxnRef');

          if (storedTxnRef) {
            console.log('Found txnRef in localStorage:', storedTxnRef);

            try {
              // L·∫•y th√¥ng tin ƒë·∫∑t v√© t·ª´ backend b·∫±ng txnRef ƒë√£ l∆∞u
              const response = await paymentAPI.getBookingByTxnRef(storedTxnRef);
              console.log('Payment API response:', response);

              if (response.state === 'SUCCESS') {
                setBookingDetails(response.object);
                setStatus('success');

                // Generate QR code and send email
                await generateQRAndSendEmail(response.object);

                // X√≥a txnRef t·ª´ localStorage sau khi ƒë√£ s·ª≠ d·ª•ng
                localStorage.removeItem('lastTxnRef');
                setLoading(false);
                return;
              } else {
                console.error('Payment API failed:', response.message);
                setErrorMessage('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin thanh to√°n: ' + (response.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh'));
                setStatus('failed');
                setLoading(false);
                return;
              }
            } catch (error) {
              console.error('Error fetching booking details from localStorage txnRef:', error);
              setErrorMessage('L·ªói khi l·∫•y th√¥ng tin thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.');
              setStatus('failed');
              setLoading(false);
              return;
            }
          } else {
            console.log('No stored txnRef found in localStorage');
            setErrorMessage('Kh√¥ng t√¨m th·∫•y th√¥ng tin thanh to√°n. Vui l√≤ng truy c·∫≠p t·ª´ trang ƒë·∫∑t v√©.');
            setStatus('failed');
            setLoading(false);
            return;
          }
        }

        // Extract VNPay parameters from URL
        const vnpayResponse: VNPayResponse = {
          vnp_Amount: searchParams.get('vnp_Amount') || '',
          vnp_BankCode: searchParams.get('vnp_BankCode') || '',
          vnp_BankTranNo: searchParams.get('vnp_BankTranNo') || '',
          vnp_CardType: searchParams.get('vnp_CardType') || '',
          vnp_OrderInfo: searchParams.get('vnp_OrderInfo') || '',
          vnp_PayDate: searchParams.get('vnp_PayDate') || '',
          vnp_ResponseCode: searchParams.get('vnp_ResponseCode') || '',
          vnp_TmnCode: searchParams.get('vnp_TmnCode') || '',
          vnp_TransactionNo: searchParams.get('vnp_TransactionNo') || '',
          vnp_TransactionStatus: searchParams.get('vnp_TransactionStatus') || '',
          vnp_TxnRef: txnRef || '',
          vnp_SecureHash: searchParams.get('vnp_SecureHash') || '',
        };

        console.log('VNPay response:', vnpayResponse);
        setPaymentData(vnpayResponse);

        // Ki·ªÉm tra xem c√≥ m√£ giao d·ªãch kh√¥ng
        if (!vnpayResponse.vnp_TxnRef) {
          console.error('No transaction reference found in URL or localStorage');
          setErrorMessage('Kh√¥ng t√¨m th·∫•y m√£ giao d·ªãch');
          setStatus('failed');
          setLoading(false);
          return;
        }

        // Determine payment status
        const paymentStatus = vnpayResponse.vnp_ResponseCode === '00' && vnpayResponse.vnp_TransactionStatus === '00'
          ? 'success'
          : 'failed';
        setStatus(paymentStatus);

        // If payment successful, confirm payment and fetch booking details
        if (paymentStatus === 'success' && vnpayResponse.vnp_TxnRef) {
          try {
            // First confirm the payment and generate tickets
            console.log('Confirming payment for txnRef:', vnpayResponse.vnp_TxnRef);
            const confirmResponse = await paymentAPI.confirmPayment(vnpayResponse.vnp_TxnRef);
            console.log('Confirm payment response:', confirmResponse);

            if (confirmResponse.state === 'SUCCESS') {
              // Then fetch the updated booking details with tickets
              console.log('Fetching booking details for txnRef:', vnpayResponse.vnp_TxnRef);
              const response = await paymentAPI.getBookingByTxnRef(vnpayResponse.vnp_TxnRef);
              console.log('Booking details response:', response);

              if (response.state === 'SUCCESS') {
                setBookingDetails(response.object);

                // Generate QR code and send email
                await generateQRAndSendEmail(response.object);

                // Log ticket status if available
                if (response.object.order?.tickets && response.object.order.tickets.length > 0) {
                  const firstTicket = response.object.order.tickets[0];
                  console.log('Ticket data:', firstTicket);
                  
                  // L·∫•y th√¥ng tin phim t·ª´ ticket n·∫øu kh√¥ng c√≥ trong bookingDetails
                  if (!response.object.movie && firstTicket.showtime?.movie) {
                    response.object.movie = firstTicket.showtime.movie;
                    console.log('Updated movie info from ticket:', response.object.movie);
                  }

                  // Ki·ªÉm tra tr·∫°ng th√°i v√©
                  console.log('Ticket status:', firstTicket.status);
                  if (firstTicket.status === 'PAID') {
                    console.log('Ticket is paid');
                  }
                }
              } else {
                console.error('Failed to get booking details:', response.message);
                setErrorMessage('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ƒë·∫∑t v√©: ' + (response.message || 'Kh√¥ng x√°c ƒë·ªãnh'));
              }
            } else {
              console.error('Failed to confirm payment:', confirmResponse.message);
              setErrorMessage('Kh√¥ng th·ªÉ x√°c nh·∫≠n thanh to√°n: ' + confirmResponse.message);
            }
          } catch (error) {
            console.error('Error confirming payment or fetching booking details:', error);
            setErrorMessage('L·ªói khi x√°c nh·∫≠n thanh to√°n ho·∫∑c l·∫•y th√¥ng tin ƒë·∫∑t v√©');
          }
        } else if (paymentStatus === 'failed') {
          setErrorMessage('Thanh to√°n kh√¥ng th√†nh c√¥ng. M√£ l·ªói: ' + vnpayResponse.vnp_ResponseCode);
        }
      } catch (error) {
        console.error('Error processing payment:', error);
        setErrorMessage('L·ªói x·ª≠ l√Ω thanh to√°n');
      } finally {
        setLoading(false);
      }
    };

    processPayment();
  }, [searchParams]);

  // Format amount from VNPay (cents to VND)
  const formatAmount = (amount: string) => {
    const amountInVND = parseInt(amount) / 100;
    return amountInVND.toLocaleString('vi-VN');
  };

  // Format date from VNPay format (YYYYMMDDHHmmss)
  const formatDate = (dateString: string) => {
    if (!dateString || dateString.length !== 14) return dateString;

    const year = dateString.substring(0, 4);
    const month = dateString.substring(4, 6);
    const day = dateString.substring(6, 8);
    const hour = dateString.substring(8, 10);
    const minute = dateString.substring(10, 12);
    const second = dateString.substring(12, 14);

    return `${day}/${month}/${year} ${hour}:${minute}:${second}`;
  };

  // Get status icon and styling
  const getStatusIcon = () => {
    switch (status) {
      case 'success':
        return <CheckCircleIcon className="h-16 w-16 text-green-500 mx-auto mb-4" />;
      case 'failed':
        return <XCircleIcon className="h-16 w-16 text-red-500 mx-auto mb-4" />;
      default:
        return <ClockIcon className="h-16 w-16 text-yellow-500 mx-auto mb-4" />;
    }
  };

  const getStatusInfo = () => {
    switch (status) {
      case 'success':
        return {
          title: 'Thanh to√°n th√†nh c√¥ng!',
          message: 'V√© c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ nh·∫≠n th√¥ng tin chi ti·∫øt.',
          color: 'text-green-600'
        };
      case 'failed':
        return {
          title: 'Thanh to√°n th·∫•t b·∫°i',
          message: 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh thanh to√°n. Vui l√≤ng th·ª≠ l·∫°i.',
          color: 'text-red-600'
        };
      default:
        return {
          title: 'ƒêang x·ª≠ l√Ω thanh to√°n',
          message: 'Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...',
          color: 'text-yellow-600'
        };
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <LoadingSpinner />
      </div>
    );
  }

  const statusInfo = getStatusInfo();

  return (
    <div className="min-h-screen bg-gray-100 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="bg-white rounded-lg shadow-lg p-8">
          {/* Status Icon */}
          <div className="text-center mb-6">
            {getStatusIcon()}
          </div>

          {/* Status Message */}
          <div className="text-center mb-8">
            <h1 className={`text-2xl font-bold mb-2 ${statusInfo.color}`}>
              {statusInfo.title}
            </h1>
            <p className="text-gray-600">
              {errorMessage || statusInfo.message}
            </p>
          </div>

          {/* Booking Details */}
          {bookingDetails && status === 'success' && (
            <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-6 flex items-center">
                <TicketIcon className="h-6 w-6 mr-2 text-gray-600" />
                Th√¥ng tin v√© ƒë√£ ƒë·∫∑t
              </h2>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                {/* Left Column - Movie & Showtime Info */}
                <div className="space-y-6">
                  {/* Movie Information */}
                  <div className="border rounded-lg p-4">
                    <h3 className="font-medium text-gray-900 mb-3 flex items-center">
                      <FilmIcon className="h-5 w-5 mr-2 text-gray-600" />
                      Th√¥ng tin phim
                    </h3>
                    <div className="flex items-center space-x-4">
                      {(bookingDetails?.movie?.posterUrl || bookingDetails?.order?.tickets?.[0]?.showtime?.movie?.posterUrl) && (
                        <img
                          src={bookingDetails?.movie?.posterUrl || bookingDetails?.order?.tickets?.[0]?.showtime?.movie?.posterUrl}
                          alt="Movie Poster"
                          className="w-16 h-20 object-cover rounded"
                        />
                      )}
                      <div>
                        <div className="font-medium text-gray-900">
                          {bookingDetails?.movie?.title || bookingDetails?.order?.tickets?.[0]?.showtime?.movie?.title || 'Phim ƒë√£ ƒë·∫∑t'}
                        </div>
                        <div className="text-sm text-gray-500">
                          M√£ v√©: #{bookingDetails.id}
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Showtime Information */}
                  <div className="border rounded-lg p-4">
                    <h3 className="font-medium text-gray-900 mb-3 flex items-center">
                      <CalendarIcon className="h-5 w-5 mr-2 text-gray-600" />
                      Su·∫•t chi·∫øu
                    </h3>
                    <div className="space-y-2">
                      <div className="text-sm text-gray-600">
                        {bookingDetails?.showtime?.startTime ? 
                          new Date(bookingDetails.showtime.startTime).toLocaleDateString('vi-VN', {
                            weekday: 'long',
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          }) : 'Ng√†y chi·∫øu'
                        }
                      </div>
                      <div className="font-medium text-gray-900">
                        {bookingDetails?.showtime?.startTime ? 
                          new Date(bookingDetails.showtime.startTime).toLocaleTimeString('vi-VN', {
                            hour: '2-digit',
                            minute: '2-digit'
                          }) : '--:--'
                        } - {bookingDetails?.showtime?.endTime ? 
                          new Date(bookingDetails.showtime.endTime).toLocaleTimeString('vi-VN', {
                            hour: '2-digit',
                            minute: '2-digit'
                          }) : '--:--'
                        }
                      </div>
                    </div>
                  </div>

                  {/* Cinema Information */}
                  <div className="border rounded-lg p-4">
                    <h3 className="font-medium text-gray-900 mb-3 flex items-center">
                      <BuildingOfficeIcon className="h-5 w-5 mr-2 text-gray-600" />
                      R·∫°p chi·∫øu
                    </h3>
                    <div className="space-y-2">
                      <div className="font-medium text-gray-900">
                        {bookingDetails?.showtime?.room?.cinema?.name || 
                         bookingDetails?.order?.tickets?.[0]?.showtime?.room?.cinema?.name || 
                         'R·∫°p chi·∫øu phim'}
                      </div>
                      <div className="text-sm text-gray-600">
                        {bookingDetails?.showtime?.room?.cinema?.address || 
                         bookingDetails?.order?.tickets?.[0]?.showtime?.room?.cinema?.address || 
                         'ƒê·ªãa ch·ªâ r·∫°p chi·∫øu'}
                      </div>
                      <div className="text-sm text-gray-500">
                        Ph√≤ng: {bookingDetails?.showtime?.room?.name || 
                               bookingDetails?.order?.tickets?.[0]?.showtime?.room?.name || 
                               'Ph√≤ng chi·∫øu'}
                      </div>
                    </div>
                  </div>

                  {/* Seats Information */}
                  <div className="border rounded-lg p-4">
                    <h3 className="font-medium text-gray-900 mb-3 flex items-center">
                      <TicketIcon className="h-5 w-5 mr-2 text-gray-600" />
                      Gh·∫ø ƒë√£ ƒë·∫∑t ({bookingDetails?.order?.tickets?.length || 0})
                    </h3>
                    {bookingDetails?.order?.tickets && bookingDetails.order.tickets.length > 0 ? (
                      <div className="space-y-2">
                        {bookingDetails.order.tickets.map((ticket, index) => {
                          console.log(`Rendering ticket ${index}:`, ticket);
                          
                          // ƒê·∫£m b·∫£o c√≥ th√¥ng tin gh·∫ø ƒë·ªÉ hi·ªÉn th·ªã
                          const seatNumber = ticket?.seat?.seatNumber || `Gh·∫ø ${index + 1}`;
                          const seatType = ticket?.seat?.seatType || 'REGULAR';
                          const seatPrice = ticket?.seat?.price || ticket?.price || 80000;
                          
                          return (
                            <div 
                              key={ticket?.id ?? ticket?.token ?? index} 
                              className="flex justify-between items-center py-2 border-b border-gray-100 last:border-b-0"
                            >
                              <div className="flex items-center space-x-2">
                                <span className="font-medium text-gray-900 bg-blue-50 px-2 py-1 rounded">
                                  {seatNumber}
                                </span>
                                <span className="text-sm text-gray-500">
                                  ({seatType === 'VIP' ? 'VIP' : 
                                    seatType === 'COUPLE' ? 'Gh·∫ø ƒë√¥i' : 'Gh·∫ø th∆∞·ªùng'})
                                </span>
                                {ticket.status === 'PAID' && (
                                  <span className="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">
                                    ƒê√£ thanh to√°n
                                  </span>
                                )}
                              </div>
                              <div className="font-medium text-gray-900">
                                {seatPrice.toLocaleString('vi-VN')}ƒë
                              </div>
                            </div>
                          );
                        })}
                        
                        <div className="pt-2 mt-2 border-t">
                          <div className="flex justify-between items-center font-medium">
                            <span>T·ªïng c·ªông:</span>
                            <span className="text-lg text-blue-600">
                              {bookingDetails.order.tickets.reduce((sum, ticket) => {
                                const seatPrice = ticket?.seat?.price || ticket?.price || 80000;
                                return sum + seatPrice;
                              }, 0).toLocaleString('vi-VN')}ƒë
                            </span>
                          </div>
                        </div>
                        
                        {/* Th√¥ng tin th√™m v·ªÅ booking */}
                        <div className="pt-2 mt-2 border-t bg-gray-50 p-3 rounded">
                          <div className="text-sm space-y-1">
                            <div className="flex justify-between">
                              <span className="text-gray-600">M√£ booking:</span>
                              <span className="font-medium">#{bookingDetails.id}</span>
                            </div>
                            {bookingDetails.totalPrice && (
                              <div className="flex justify-between">
                                <span className="text-gray-600">T·ªïng thanh to√°n:</span>
                                <span className="font-medium">{bookingDetails.totalPrice.toLocaleString('vi-VN')}ƒë</span>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ) : (
                      <div className="text-center text-gray-500 py-4">
                        <TicketIcon className="h-8 w-8 mx-auto mb-2 text-gray-300" />
                        <p className="font-medium">Kh√¥ng t√¨m th·∫•y th√¥ng tin gh·∫ø chi ti·∫øt</p>
                        <p className="text-sm mt-1">
                          Booking #{bookingDetails.id} - T·ªïng: {bookingDetails.totalPrice?.toLocaleString('vi-VN')}ƒë
                        </p>
                        <p className="text-xs mt-1 text-gray-400">
                          Vui l√≤ng li√™n h·ªá h·ªó tr·ª£ n·∫øu c·∫ßn th√¥ng tin chi ti·∫øt
                        </p>
                      </div>
                    )}
                  </div>
                </div>

                {/* Right Column - QR Code & Customer Info */}
                <div className="space-y-6">
                  {/* QR Code */}
                  {qrCodeUrl && (
                    <div className="border rounded-lg p-4 text-center">
                      <h3 className="font-medium text-gray-900 mb-3 flex items-center justify-center">
                        <QrCodeIcon className="h-5 w-5 mr-2 text-gray-600" />
                        M√£ QR v√©
                      </h3>
                      <div className="bg-gray-50 p-4 rounded">
                        <img
                          src={qrCodeUrl}
                          alt="QR Code"
                          className="mx-auto mb-2"
                          style={{ width: '150px', height: '150px' }}
                        />
                        <p className="text-xs text-gray-600">
                          Xu·∫•t tr√¨nh m√£ QR n√†y t·∫°i r·∫°p
                        </p>
                      </div>
                    </div>
                  )}

                  {/* Customer Information */}
                  <div className="border rounded-lg p-4">
                    <h3 className="font-medium text-gray-900 mb-3 flex items-center">
                      <UserIcon className="h-5 w-5 mr-2 text-gray-600" />
                      Th√¥ng tin kh√°ch h√†ng
                    </h3>
                    <div className="space-y-3">
                      <div>
                        <div className="text-sm text-gray-500">H·ªç t√™n</div>
                        <div className="font-medium text-gray-900">
                          {bookingDetails.customerName}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-gray-500">Email</div>
                        <div className="font-medium text-gray-900 break-words">
                          {bookingDetails.customerEmail}
                        </div>
                      </div>
                      <div>
                        <div className="text-sm text-gray-500">Tr·∫°ng th√°i</div>
                        <div className="font-medium">
                          <span className="inline-block bg-green-100 text-green-800 px-2 py-1 rounded text-sm">
                            ƒê·∫∑t v√© th√†nh c√¥ng
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Important Notice */}
                  <div className="border border-gray-200 rounded-lg p-4">
                    <h4 className="font-medium text-gray-900 mb-2">L∆∞u √Ω quan tr·ªçng</h4>
                    <ul className="text-sm text-gray-600 space-y-1">
                      <li>‚Ä¢ C√≥ m·∫∑t tr∆∞·ªõc gi·ªù chi·∫øu 15 ph√∫t</li>
                      <li>‚Ä¢ Mang theo m√£ QR v√† gi·∫•y t·ªù t√πy th√¢n</li>
                      <li>‚Ä¢ Kh√¥ng ƒë∆∞·ª£c ƒë·ªïi/tr·∫£ v√© sau thanh to√°n</li>
                      <li>‚Ä¢ Ki·ªÉm tra k·ªπ th√¥ng tin tr∆∞·ªõc khi v√†o r·∫°p</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Payment Details */}
          {paymentData && (
            <div className="bg-white border rounded-lg p-4 mb-6">
              <h2 className="text-lg font-medium text-gray-900 mb-4 flex items-center">
                <CreditCardIcon className="h-5 w-5 mr-2 text-gray-600" />
                Chi ti·∫øt thanh to√°n
              </h2>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                <div>
                  <div className="text-gray-500">M√£ giao d·ªãch</div>
                  <div className="font-medium text-gray-900">{paymentData.vnp_TxnRef}</div>
                </div>

                <div>
                  <div className="text-gray-500">S·ªë ti·ªÅn</div>
                  <div className="font-medium text-gray-900">
                    {formatAmount(paymentData.vnp_Amount)}ƒë
                  </div>
                </div>

                <div>
                  <div className="text-gray-500">Ng√¢n h√†ng</div>
                  <div className="font-medium text-gray-900">{paymentData.vnp_BankCode}</div>
                </div>

                <div>
                  <div className="text-gray-500">Lo·∫°i th·∫ª</div>
                  <div className="font-medium text-gray-900">{paymentData.vnp_CardType}</div>
                </div>

                <div>
                  <div className="text-gray-500">M√£ giao d·ªãch ng√¢n h√†ng</div>
                  <div className="font-medium text-gray-900">{paymentData.vnp_BankTranNo}</div>
                </div>

                <div>
                  <div className="text-gray-500">Th·ªùi gian</div>
                  <div className="font-medium text-gray-900">
                    {formatDate(paymentData.vnp_PayDate)}
                  </div>
                </div>

                <div className="md:col-span-2">
                  <div className="text-gray-500">Th√¥ng tin ƒë∆°n h√†ng</div>
                  <div className="font-medium text-gray-900">
                    {decodeURIComponent(paymentData.vnp_OrderInfo)}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            {status === 'success' ? (
              <>
                <button
                  onClick={() => navigate('/my-bookings')}
                  className="bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  Xem v√© c·ªßa t√¥i
                </button>
                <button
                  onClick={() => navigate('/')}
                  className="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-colors"
                >
                  V·ªÅ trang ch·ªß
                </button>
              </>
            ) : status === 'failed' ? (
              <>
                <button
                  onClick={() => navigate('/booking')}
                  className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors"
                >
                  Th·ª≠ l·∫°i
                </button>
                <button
                  onClick={() => navigate('/')}
                  className="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-colors"
                >
                  V·ªÅ trang ch·ªß
                </button>
              </>
            ) : (
              <button
                onClick={() => navigate('/')}
                className="bg-gray-600 text-white px-6 py-3 rounded-lg hover:bg-gray-700 transition-colors"
              >
                V·ªÅ trang ch·ªß
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default PaymentCallback;

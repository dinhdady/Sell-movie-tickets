# Script ƒë·ªÉ test hi·ªÉn th·ªã th√¥ng tin su·∫•t chi·∫øu trong admin
Write-Host "üé¨ Testing showtime display in admin movie management" -ForegroundColor Yellow

# L·∫•y danh s√°ch phim
Write-Host "üîç Getting movies list..." -ForegroundColor Blue
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8080/api/movie" -Method GET
    $movies = $response.movies
    
    if ($movies.Count -gt 0) {
        Write-Host "‚úÖ Found $($movies.Count) movies" -ForegroundColor Green
        
        # L·∫•y phim ƒë·∫ßu ti√™n ƒë·ªÉ test
        $testMovie = $movies[0]
        Write-Host "`nüìΩÔ∏è Testing with movie: $($testMovie.title) (ID: $($testMovie.id))" -ForegroundColor Cyan
        
        # L·∫•y su·∫•t chi·∫øu c·ªßa phim n√†y
        Write-Host "üîç Getting showtimes for movie ID $($testMovie.id)..." -ForegroundColor Blue
        try {
            $showtimeResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/showtime/movie/$($testMovie.id)" -Method GET
            $showtimes = $showtimeResponse.object
            
            if ($showtimes.Count -gt 0) {
                Write-Host "‚úÖ Found $($showtimes.Count) showtimes for this movie" -ForegroundColor Green
                Write-Host "`nüìã Showtimes details:" -ForegroundColor Blue
                foreach ($showtime in $showtimes) {
                    Write-Host "  - ID: $($showtime.id)" -ForegroundColor Cyan
                    Write-Host "    Start: $($showtime.startTime)" -ForegroundColor White
                    Write-Host "    End: $($showtime.endTime)" -ForegroundColor White
                    Write-Host "    Room: $($showtime.roomName)" -ForegroundColor White
                    Write-Host "    Cinema: $($showtime.cinemaName)" -ForegroundColor White
                    Write-Host ""
                }
            } else {
                Write-Host "‚ö†Ô∏è No showtimes found for this movie" -ForegroundColor Yellow
                Write-Host "Let's create a test showtime..." -ForegroundColor Blue
                
                # T·∫°o su·∫•t chi·∫øu test
                $showtimeData = @{
                    movieId = $testMovie.id
                    roomId = 1
                    startTime = (Get-Date).AddDays(1).ToString("yyyy-MM-ddTHH:mm")
                    endTime = (Get-Date).AddDays(1).AddHours(2).ToString("yyyy-MM-ddTHH:mm")
                }
                
                try {
                    $createResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/showtime" -Method POST -Body ($showtimeData | ConvertTo-Json) -ContentType "application/json"
                    Write-Host "‚úÖ Test showtime created successfully!" -ForegroundColor Green
                    Write-Host "Showtime ID: $($createResponse.object.id)" -ForegroundColor Green
                } catch {
                    Write-Host "‚ùå Error creating test showtime: $($_.Exception.Message)" -ForegroundColor Red
                }
            }
        } catch {
            Write-Host "‚ùå Error getting showtimes: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        Write-Host "`nüåê You can test the admin interface at: http://localhost:5173/admin/movies" -ForegroundColor Yellow
        Write-Host "`nüéØ Steps to test:" -ForegroundColor Blue
        Write-Host "1. Go to admin movies page" -ForegroundColor White
        Write-Host "2. Click the calendar icon (üìÖ) next to a movie" -ForegroundColor White
        Write-Host "3. Click 'Th√™m su·∫•t chi·∫øu' button" -ForegroundColor White
        Write-Host "4. Check if movie information is displayed" -ForegroundColor White
        Write-Host "5. Check if current showtimes are listed" -ForegroundColor White
        
    } else {
        Write-Host "‚ùå No movies found" -ForegroundColor Red
        Write-Host "Let's create a test movie first..." -ForegroundColor Blue
        
        $movieData = @{
            title = "Test Movie for Showtime Display"
            description = "A test movie for testing showtime display functionality"
            duration = 120
            releaseDate = "2024-12-25"
            genre = "Action"
            director = "Test Director"
            trailerUrl = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
            language = "English"
            cast = "Test Cast"
            rating = 8.5
            status = "NOW_SHOWING"
            price = 100000
            filmRating = "PG13"
        }
        
        try {
            $createResponse = Invoke-RestMethod -Uri "http://localhost:8080/api/movie/add" -Method POST -Form $movieData
            Write-Host "‚úÖ Test movie created with ID: $($createResponse.data.id)" -ForegroundColor Green
            Write-Host "üåê You can now test at: http://localhost:5173/admin/movies" -ForegroundColor Yellow
        } catch {
            Write-Host "‚ùå Error creating test movie: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
} catch {
    Write-Host "‚ùå Error getting movies: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nüìã Features to verify in admin interface:" -ForegroundColor Blue
Write-Host "‚úÖ Movie information display in add showtime modal" -ForegroundColor Green
Write-Host "‚úÖ Current showtimes list with details" -ForegroundColor Green
Write-Host "‚úÖ Responsive design and proper formatting" -ForegroundColor Green
Write-Host "‚úÖ Real-time data loading" -ForegroundColor Green

Write-Host "`nüèÅ Test completed" -ForegroundColor Blue

Write-Host "=== TESTING EMAIL VERIFICATION LOGIN ==="

Write-Host "1. Starting backend with email verification check..."
Start-Process powershell -ArgumentList "-ExecutionPolicy Bypass -Command `"cd .. ; mvn spring-boot:run`"" -NoNewWindow
Write-Host "Waiting for backend to start..."
Start-Sleep -Seconds 30

Write-Host "2. Starting frontend..."
Start-Process powershell -ArgumentList "-ExecutionPolicy Bypass -Command `"npm run dev`"" -WorkingDirectory "frontend" -NoNewWindow
Write-Host "Waiting for frontend to start..."
Start-Sleep -Seconds 15

Write-Host "=== APPLICATION STARTED ==="
Write-Host "Backend: http://localhost:8080"
Write-Host "Frontend: http://localhost:5174"

Write-Host ""
Write-Host "=== EMAIL VERIFICATION LOGIN FEATURE ==="
Write-Host "This feature requires email verification before login:"
Write-Host "1. Only users with is_email_verified = 1 can login"
Write-Host "2. Unverified users get error message"
Write-Host "3. Check database for user verification status"
Write-Host ""
Write-Host "=== TESTING API ENDPOINTS ==="
Write-Host "1. Test login with unverified user:"
Write-Host "   curl -X POST http://localhost:8080/api/auth/login -H `"Content-Type: application/json`" -d `"{\`"username\`":\`"testuser\`",\`"password\`":\`"password\`"}`""
Write-Host ""
Write-Host "2. Test login with verified user:"
Write-Host "   curl -X POST http://localhost:8080/api/auth/login -H `"Content-Type: application/json`" -d `"{\`"username\`":\`"admin\`",\`"password\`":\`"admin123\`"}`""
Write-Host ""
Write-Host "=== EXPECTED BEHAVIOR ==="
Write-Host "Before email verification (is_email_verified = 0 or NULL):"
Write-Host "- User tries to login"
Write-Host "- Gets error: 'Vui lòng xác thực email trước khi đăng nhập'"
Write-Host "- Cannot access protected resources"
Write-Host ""
Write-Host "After email verification (is_email_verified = 1):"
Write-Host "- User can login successfully"
Write-Host "- Gets JWT token"
Write-Host "- Can access protected resources"
Write-Host ""
Write-Host "=== BACKEND LOGGING ==="
Write-Host "Look for logs like:"
Write-Host "[AuthenticationService] Login attempt for username: testuser"
Write-Host "[AuthenticationService] Login attempt for unverified email: user@example.com"
Write-Host "[AuthenticationService] AccessToken generated for admin: [token]"
Write-Host ""
Write-Host "=== DATABASE CHECK ==="
Write-Host "Check users table:"
Write-Host "SELECT id, username, email, is_email_verified FROM users;"
Write-Host ""
Write-Host "Set user as verified for testing:"
Write-Host "UPDATE users SET is_email_verified = 1 WHERE username = 'testuser';"
Write-Host ""
Write-Host "=== TESTING STEPS ==="
Write-Host "1. Check current user verification status in database"
Write-Host "2. Try to login with unverified user - should fail"
Write-Host "3. Update user to verified in database"
Write-Host "4. Try to login again - should succeed"
Write-Host "5. Check backend logs for verification messages"
Write-Host ""
Write-Host "=== FRONTEND IMPACT ==="
Write-Host "Frontend should handle email verification errors:"
Write-Host "1. Show appropriate error messages"
Write-Host "2. Display 'Please verify your email' message"
Write-Host "3. Provide link to resend verification email"
Write-Host ""
Write-Host "Press any key to exit..."
$host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown") | Out-Null

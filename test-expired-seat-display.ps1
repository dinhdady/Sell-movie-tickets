Write-Host "=== TESTING EXPIRED SHOWTIME SEAT DISPLAY ==="

Write-Host "1. Starting backend..."
Start-Process powershell -ArgumentList "-ExecutionPolicy Bypass -Command `"cd .. ; mvn spring-boot:run`"" -NoNewWindow
Write-Host "Waiting for backend to start..."
Start-Sleep -Seconds 30

Write-Host "2. Starting frontend..."
Start-Process powershell -ArgumentList "-ExecutionPolicy Bypass -Command `"npm run dev`"" -WorkingDirectory "frontend" -NoNewWindow
Write-Host "Waiting for frontend to start..."
Start-Sleep -Seconds 15

Write-Host "=== APPLICATION STARTED ==="
Write-Host "Backend: http://localhost:8080"
Write-Host "Frontend: http://localhost:5176"

Write-Host ""
Write-Host "=== EXPIRED SHOWTIME SEAT DISPLAY FEATURE ==="
Write-Host "This feature automatically shows all seats as AVAILABLE for expired showtimes:"
Write-Host "1. Frontend calls API to get seat status"
Write-Host "2. Backend checks if showtime.endTime < now"
Write-Host "3. If expired: returns all seats as AVAILABLE"
Write-Host "4. If not expired: returns normal seat status"
Write-Host ""
Write-Host "=== NEW API ENDPOINTS ==="
Write-Host "1. Seat Status: GET http://localhost:8080/api/booking/{showtimeId}/seat-status"
Write-Host "2. Available Seats: GET http://localhost:8080/api/booking/{showtimeId}/available-seats"
Write-Host "3. Booked Seats: GET http://localhost:8080/api/booking/{showtimeId}/booked-seats"
Write-Host ""
Write-Host "=== EXPECTED API RESPONSE FOR EXPIRED SHOWTIME ==="
Write-Host "{"
Write-Host "  `"status`": `"200`","
Write-Host "  `"message`": `"Seat status retrieved successfully!`","
Write-Host "  `"data`": {"
Write-Host "    `"showtimeId`": 123,"
Write-Host "    `"movieTitle`": `"Movie Name`","
Write-Host "    `"startTime`": `"2025-09-23T18:00:00`","
Write-Host "    `"endTime`": `"2025-09-23T20:00:00`","
Write-Host "    `"isExpired`": true,"
Write-Host "    `"currentTime`": `"2025-09-23T22:30:00`","
Write-Host "    `"availableSeats`": [`"A1`", `"A2`", `"A3`", `"B1`", `"B2`"],"
Write-Host "    `"bookedSeats`": [],"
Write-Host "    `"totalAvailableSeats`": 5,"
Write-Host "    `"totalBookedSeats`": 0"
Write-Host "  }"
Write-Host "}"
Write-Host ""
Write-Host "=== EXPECTED API RESPONSE FOR ACTIVE SHOWTIME ==="
Write-Host "{"
Write-Host "  `"data`": {"
Write-Host "    `"isExpired`": false,"
Write-Host "    `"availableSeats`": [`"A1`", `"A3`"],"
Write-Host "    `"bookedSeats`": [`"A2`", `"B1`"],"
Write-Host "    `"totalAvailableSeats`": 2,"
Write-Host "    `"totalBookedSeats`": 2"
Write-Host "  }"
Write-Host "}"
Write-Host ""
Write-Host "=== TESTING STEPS ==="
Write-Host "1. Find a showtime with endTime in the past"
Write-Host "2. Call seat-status API for that showtime"
Write-Host "3. Verify isExpired = true and all seats are available"
Write-Host "4. Find a showtime with endTime in the future"
Write-Host "5. Call seat-status API for that showtime"
Write-Host "6. Verify isExpired = false and normal seat status"
Write-Host ""
Write-Host "=== CURL COMMANDS ==="
Write-Host "curl http://localhost:8080/api/booking/123/seat-status"
Write-Host "curl http://localhost:8080/api/booking/123/available-seats"
Write-Host "curl http://localhost:8080/api/booking/123/booked-seats"
Write-Host ""
Write-Host "Press any key to exit..."
$host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown") | Out-Null
